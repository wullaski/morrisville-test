@mixin breakpoint($query) {
  $query-string: breakpoint-parse-query($query);

  @media #{$query-string} {
    @content;
  }

  // Missing the no query fallbacks code
}

@function breakpoint-parse-query($query) {
  $length: length($query);
  $mq: 'all ';

  // If it's a single number
  @if $length == 1 {
    @return $mq + 'and (min-width: ' + $query + ')';
  }

  // If we've got a string/number
  @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') {
    @return $mq + 'and (' + nth($query, 1) + ': ' + nth($query, 2) + ')';
  }

  // If they're both numbers, we assume it's a double and roll with that
  @if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {
    @return $mq + 'and (min-width: ' + nth($query, 1) + ') and (max-width: ' + nth($query, 2) + ' )';
  }

  // Else assume is a list of properly formatted mq
  @each $single-query in $query {
    $mq: $mq + 'and (' + nth($query, 1) + ': ' + nth($query, 2) + ')';
  }
  @return $mq;
}

// retina image mixin
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// equal heights columns
@mixin equal-heights($currentPaddingBottom: 0px){
  padding-bottom: 9999px;
  margin-bottom: -9999px + $currentPaddingBottom;
}

// columns no gutter
@mixin cols-no-gutter($columns, $context){
  float: left;
  width: percentage($columns / $context);
}


// Transition all with easing
@mixin transAllEase($duration, $delay) {
  -webkit-transition: all $duration ease-in-out $delay;
  -moz-transition: all $duration ease-in-out $delay;
  -ms-transition: all $duration ease-in-out $delay;
  -o-transition: all $duration ease-in-out $delay;
  transition: all $duration ease-in-out $delay;
}
// Vendorize
@mixin vendorize($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

// Text Hide - Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin text-hide() {
  font: #{0/0} a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// When all you want is a fix
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

/* All Input Types */
@function assign-inputs($inputs) {
  $list : ();
  @each $input in $inputs {
    $input: unquote($input);
    $list: append($list, $input, comma);
  }
  @return $list;
}
$inputs-list:
    'input[type="email"]',
    'input[type="number"]',
    'input[type="password"]',
    'input[type="search"]',
    'input[type="tel"]',
    'input[type="text"]',
    'input[type="url"]',
    'textarea',
    // Webkit & Gecko may change the display of these in the future
    'input[type="color"]',
    'input[type="date"]',
    'input[type="datetime"]',
    'input[type="datetime-local"]',
    'input[type="month"]',
    'input[type="time"]',
    'input[type="week"]';
$all-text-inputs: assign-inputs($inputs-list);


//all the headings
@mixin headings($from: 1, $to: 6){
    @for $i from $from through $to{
      h#{$i}{
        @content
      }
    }
}

/*
  mixin for elements with one fixed and one flexible column
  $fix-direction is either 'left' or 'right'
  $fix-width and $fix-margin can use rem, em or px
  usage on parent of 2 elements: @include fix-flex('left',125px,1em);
*/

@mixin fix-cell($fix-direction,$fix-width) {
  width: $fix-width;
  display: block;
  max-width: none;
}

@mixin flex-cell {
  display: table-cell;
  width: 100%;
  vertical-align: top;
}

@mixin fix-flex($fix-direction,$fix-width,$fix-margin) {
  display: table;
  width: 100%;
  @if $fix-direction == 'left' {
    & > :first-child {
      @include fix-cell($fix-direction,$fix-width);
      margin-right: $fix-margin;
    }
    & > :last-child {
      @include flex-cell;
    }
  } @else {
    & > :first-child {
      @include flex-cell;
    }
    & > :last-child {
      @include fix-cell($fix-direction,$fix-width);
      margin-left: $fix-margin;
    }
  }
}

/* ============================================================================= */
/* mixin for making link underlines that break around decenders */
/* lifted and tweaked from https://eager.io/blog/smarter-link-underlines/ */
/* ============================================================================= */

$selectionColor: $black;

@mixin textShadowToCropUnderline($underlineColor) {
  text-shadow: .03em 0 $underlineColor, -.03em 0 $underlineColor, 0 .03em $underlineColor, 0 -.03em $underlineColor, .06em 0 $underlineColor, -.06em 0 $underlineColor, .09em 0 $underlineColor, -.09em 0 $underlineColor, .12em 0 $underlineColor, -.12em 0 $underlineColor, .15em 0 $underlineColor, -.15em 0 $underlineColor;
}

@mixin linkUnderlines($backgroundColor, $textColor, $underlineColor) {
  color: $textColor;
  text-decoration: none;
  @include textShadowToCropUnderline($backgroundColor);
  background-image: linear-gradient($backgroundColor, $backgroundColor), linear-gradient($backgroundColor, $backgroundColor), linear-gradient($underlineColor, $underlineColor);
  background-size: .1em 1px, .1em 1px, 1px 1px;
  background-repeat: no-repeat, no-repeat, repeat-x;
  background-position: 0% 90%, 100% 90%, 0% 90%;
  &::selection {
    @include textShadowToCropUnderline($selectionColor);
    background: $selectionColor;
  }
  &::-moz-selection {
    @include textShadowToCropUnderline($selectionColor);
    background: $selectionColor;
  }
  &:before, 
  &:after, 
  *, 
  *:before, 
  *:after {
    text-shadow: none;
  }
  &:hover,
  &:active {
    color: $underlineColor;
  }
  &:visited {
    color: $textColor;
  }
}

/* example usage
.test-underline {
  @include linkUnderlines($white, $textGray, $red);
  border-bottom: none;
}
*/

/* ============================================================================= */
/* end mixin for making link underlines that break around decenders */
/* ============================================================================= */